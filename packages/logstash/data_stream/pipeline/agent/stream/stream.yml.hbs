config_version: "2"
interval: 30s
resource.url: "http://localhost:9602/_node/stats?pretty=true"

state:
  want_more: false

redact:
  fields: ~

program: |
  get_request("http://localhost:9602/_node/stats?pretty=true").do_request().as(resp, bytes(resp.Body)
    .decode_json().as(body,
      body.pipelines.map(pipeline_name, {"name":pipeline_name}.with(body.pipelines[pipeline_name])
        .with({
          "host":{
            "name":body.name,
            "address":body.http_address,
          }
        })
        .with({
          "outputs":body.pipelines[pipeline_name]["plugins"]["outputs"]
        })
        .with({
          "inputs":body.pipelines[pipeline_name]["plugins"]["inputs"]
        })
        .with({
          "filters":body.pipelines[pipeline_name]["plugins"]["filters"]
        })
        .with({
          "codecs":body.pipelines[pipeline_name]["plugins"]["codecs"]
        })
        .with({
          "total":{
            "time":{
              "queue_push_duration":{
                "ms":body.pipelines[pipeline_name]["events"]["queue_push_duration_in_millis"],
              },
              "duration":{
                "ms":body.pipelines[pipeline_name]["events"]["queue_push_duration_in_millis"],
              },
            },
            "reloads":{
              "successes":body.pipelines[pipeline_name]["reloads"]["successes"],
              "failures":body.pipelines[pipeline_name]["reloads"]["failures"]
            },
            "events":{
              "out":body.pipelines[pipeline_name]["events"]["out"],
              "in":body.pipelines[pipeline_name]["events"]["in"],
              "filtered":body.pipelines[pipeline_name]["events"]["filtered"],
            },
            "queues":{
              "type":body.pipelines[pipeline_name]["queue"]["type"],
              "events":body.pipelines[pipeline_name]["queue"]["events_count"],
              "current_size":{
                "bytes":body.pipelines[pipeline_name]["queue"]["queue_size_in_bytes"],
              },
              "max_size":{
                "bytes":body.pipelines[pipeline_name]["queue"]["max_queue_size_in_bytes"],
              }
            }
          }
        })
      )
      )).as(events, events.map(event,
      {
        "inputs":event.inputs.map(input,
        {
          "name":event.name,
          "id":event.hash,
          "total":event.total,
          "plugin":{
            "type":"input",
            "id":input.id,
            "name":input.name,
            "input":{
              "events":{
                "out":input.events["out"],
              },
              "time":{
                "queue_push_duration":{
                  "ms":input.events.queue_push_duration_in_millis
                }
              }
            }
          }
        }
        ),
        "codecs":event.codecs.map(codec,
        {
          "name":event.name,
          "id":event.hash,
          "total":event.total,
          "plugin":{
            "type":"codec",
            "id":codec.id,
            "name":codec.name,
            "codec":{
              "decode":{
                "duration":{
                  "ms":codec.decode.duration_in_millis
                },
                "in":codec.decode["writes_in"],
                "out":codec.decode["out"],
              },
              "encode":{
                "in":codec.encode["writes_in"],
                "duration":{
                  "ms":codec.encode.duration_in_millis
                }
              }
            }
          }
        }
        ),
        "filters":event.filters.map(filter,
        {
          "name":event.name,
          "id":event.hash,
          "total":event.total,
          "plugin":{
            "type":"filter",
            "id":filter.id,
            "name":filter.name,
            "filter":{
              "events":{
                "in":filter.events["in"],
                "out":filter.events["out"],
              },
              "time":{
                "duration":{
                  "ms":filter.events.duration_in_millis
                }
              }
            }
          }
        }
        ),
        "outputs":event.outputs.map(output,
        {
          "name":event.name,
          "id":event.hash,
          "total":event.total,
          "plugin":{
            "type":"output",
            "id":output.id,
            "name":output.name,
            "output":{
              "events":{
                "in":output.events["in"],
                "out":output.events["out"],
              },
              "time":{
                "duration":{
                  "ms":output.events.duration_in_millis
                }
              }
            }
          }
        }
        )
      }).collate(["filters", "outputs", "inputs", "codecs"])).as(eve, {"events":eve.map(each, {"logstash":{"pipeline":each}})})